{"version":3,"sources":["components/FitnessTracking/FitnessTable/FitnessTable.jsx","components/FitnessTracking/Form/Form.jsx","components/INITIALS.js","components/FitnessTracking/FitnessTracking.jsx","App.js","reportWebVitals.js","index.js"],"names":["shortid","require","FitnessTable","props","fitness","sort","a","b","date","editFitness","e","target","closest","firstChild","textContent","editElementIndex","findIndex","elem","setEditFitnessIndex","fitnessMatch","find","value","kilometers","deleteFitness","setFitness","filter","className","map","type","onClick","generate","prototypes","PropTypes","array","isRequired","func","Form","onSubmit","formSubmit","htmlFor","id","name","onChange","pattern","required","INITIAL_FORM_STATE","FitnessTracking","useState","form","setForm","setFitnessObject","editFitnessIndex","prev","preventDefault","forEach","Number","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a91585f8.chunk.js","sourcesContent":["import React from 'react';\nimport './FitnessTable.css'\nimport PropTypes from 'prop-types';\n\nconst shortid = require('shortid');\n\nexport function FitnessTable(props) {\n\n    const fitness = props.fitness.sort((a, b) => {\n        if (a.date > b.date) {\n            return 1;\n        }\n        if (a.date < b.date) {\n            return -1;\n        }\n        return 0;\n    });\n\n    const editFitness = (e) => {\n        const date = e.target.closest('.rowTable').firstChild.textContent;\n        const editElementIndex = props.fitness.findIndex((elem) => elem.date === date);\n        props.setEditFitnessIndex(editElementIndex);\n        const fitnessMatch = fitness.find((elem) => elem.date === date);\n        e.target.closest('.FitnessTracking').firstChild.date.value = fitnessMatch.date;\n        e.target.closest('.FitnessTracking').firstChild.kilometers.value = fitnessMatch.kilometers;\n    }\n\n    const deleteFitness = (e) => {\n        const date = e.target.closest('.rowTable').firstChild.textContent;\n        props.setFitness(props.fitness.filter((elem) => elem.date !== date))\n    }\n\n    return (\n        <table className={'FitnessTable'}>\n            <thead>\n                <tr>\n                    <th>Дата (дд.мм.гг)</th>\n                    <th>Км пройдено</th>\n                    <th>Действия</th>\n                </tr>\n            </thead>\n            <tbody className={'TableBody'}>\n            {\n                fitness.map((elem) =>\n                    <tr key={shortid.generate()} className={'rowTable'}>\n                        <th>{elem.date}</th>\n                        <th>{elem.kilometers}</th>\n                        <th>\n                            <button className={'FitnessTableButton'} type={'button'} onClick={editFitness}>&#9998;</button>\n                            <button className={'FitnessTableButton'} type={'button'} onClick={deleteFitness}>&#10008;</button>\n                        </th>\n                    </tr>\n                )\n            }\n            </tbody>\n        </table>\n    )\n}\n\nFitnessTable.prototypes = {\n    fitness: PropTypes.array.isRequired,\n    setFitness: PropTypes.func.isRequired,\n}\n","import React from 'react';\nimport './Form.css';\nimport PropTypes from 'prop-types';\n\nexport function Form (props) {\n\n    return (\n        <form className={'Form'} onSubmit={props.formSubmit}>\n            <label htmlFor=\"date\" className={'label'}>\n                Дата (дд.мм.гг)\n                <input type=\"text\" className={'FormInput'} id={'date'} name={'date'} onChange={props.onChange} pattern={'[0-9]{2}.[0-9]{2}.[0-9]{2}'} required={true}/>\n            </label>\n            <label htmlFor=\"kilometers\" className={'label'}>\n                Км пройдено\n                <input type=\"text\" className={'FormInput'} id={'kilometers'} name={'kilometers'} onChange={props.onChange} pattern={'^[0-9]*[.,]?[0-9]+$'} required={true}/>\n            </label>\n            <button type={'submit'} className={'FormButtonSubmit'}>Ok</button>\n        </form>\n    )\n}\n\nForm.prototypes = {\n    formSubmit: PropTypes.func.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n","export const INITIAL_FORM_STATE = {\n    date: '',\n    kilometers: '',\n}\n","import React, {useState} from 'react';\nimport './FitnessTracking.css';\nimport {FitnessTable} from './FitnessTable/FitnessTable';\nimport {Form} from './Form/Form';\nimport {INITIAL_FORM_STATE} from '../INITIALS';\n\nexport function FitnessTracking() {\n    const [form, setForm] = useState(INITIAL_FORM_STATE);\n\n    const [fitness, setFitnessObject] = useState([]);\n\n    const [editFitnessIndex, setEditFitnessIndex] = useState(null);\n\n    const onChange = (e) => {\n        setForm((prev) => ({...prev, [e.target.name]: e.target.value}));\n    }\n\n    const formSubmit = (e) => {\n        e.preventDefault();\n        if (editFitnessIndex !== null) {\n            const date = e.target.date.value;\n            const kilometers = e.target.kilometers.value;\n            fitness[editFitnessIndex].date = date;\n            fitness[editFitnessIndex].kilometers = kilometers;\n            setEditFitnessIndex(null);\n        } else {\n            const date = form.date;\n            const kilometers = form.kilometers;\n            const matchDate = fitness.find((elem) => elem.date === date);\n            if (matchDate) {\n                fitness.forEach((elem) => {\n                    if (elem.date === date) {\n                        elem.kilometers += Number(kilometers);\n                    }\n                })\n                setFitnessObject((prev) => [...prev]);\n            } else {\n                setFitnessObject((prev) => ([...prev, {date: date, kilometers: Number(kilometers)}]));\n            }\n        }\n        e.target.date.value = '';\n        e.target.kilometers.value = '';\n    }\n\n    return (\n        <div className={'FitnessTracking'}>\n            <Form onChange={onChange} formSubmit={formSubmit}/>\n            <FitnessTable\n                fitness={fitness}\n                setFitness={setFitnessObject}\n                // editFitnessIndex={editFitnessIndex}\n                setEditFitnessIndex={setEditFitnessIndex}/>\n        </div>\n    )\n}\n","import './App.css';\nimport {FitnessTracking} from './components/FitnessTracking/FitnessTracking';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FitnessTracking />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}